esphome:
  name: battery
  on_boot:
      #priority: 550.0
      then:
        - lambda: |-
            id(status) = -1; // splash screen
        - display.page.show: page_splash

esp8266:
  #board: esp01_1m
  board: d1_mini

i2c:
  sda: GPIO4
  scl: GPIO5
  frequency: 800kHz

switch:
  - platform: gpio
    pin: GPIO15
    id: jetson_on
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: gpio
    pin: D4
    id: led
    inverted: True

sensor:
  # on press button:
  # - if adc is high then jetson is off and turn on is requested
  # - if adc is low then turn off is requested
  - platform: adc
    pin: A0
    id: adc_sensor
    name: "charge"
    update_interval: 100ms
    filters:
      - multiply: 3.3
      - sliding_window_moving_average:
          window_size: 1
          send_every: 5
          send_first_at: 5 # accendiamo l'adc dopo 3 secondi
      # - median:
      #     window_size: 5
      #     send_every: 5
      #     send_first_at: 1
    on_value_range:
      - below: 0.5
        then:
          if:
            condition:
              - binary_sensor.is_off: jetson_is_powered
            then:
              - delay: 2s
              - display.page.show: page_jetson_splash
              - switch.turn_on: jetson_on
            else:
              - display.page.show: page_shutdown
              - delay: 2s
              - switch.turn_off: jetson_on
          # - lambda: |-
          #     if (id(uptime_seconds) <= 3)
          #       return;


          #     if (id(jetson_is_powered).state > 0) {
          #       id(oled).show_page(id(page_shutdown));
          #       id(oled).update();
          #       delay(2000);
          #       id(jetson_on).turn_off();
          #     } else {
          #       id(oled).show_page(id(page_jetson_splash));
          #       id(oled).update();
          #       delay(2000);
          #       id(jetson_on).turn_on();              
          #     }

      # - above: 1.0
      #   then:
      #     - if:
      #         condition:
      #           - lambda: |-    
      #               //return (id(status) <= 0); // se ho appena acceso o ero in carica
      #               return (id(jetson_is_powered).state > 0); // se ho acceso il jetson con il pulsante
      #         then:
      #           - lambda: |-
      #               id(status) = 1;
      #           - display.page.show: page_jetson_splash
      #           #- switch.turn_on: jetson_on
      #           - delay: 3s
      #           - display.page.show: page_debug
      #         else:
      #           - display.page.show: page_charge
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 15s
    id: sstrength
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s

binary_sensor:
  - platform: gpio
    pin:
      number: D5
      mode:
        input: true
        pullup: false
    name: jetson is powered
    id: jetson_is_powered


display:
  - platform: ssd1306_i2c
    id: oled
    #model: "SSD1306 128x32"
    model: "SH1106 128x64"
    update_interval: 1s
    rotation: 180
    pages:
      - id: page_debug
        lambda: |-
          it.printf(0, 0, id(font_small), "ADC=%2.2f", id(adc_sensor).state);
          it.printf(0, 15, id(font_small), "JETSON=%d,%d", id(jetson_on).state, id(jetson_is_powered).state);
          it.printf(0, 30, id(font_small), "uptime=%d", id(uptime_seconds));

      - id: page_splash
        lambda: |-
          it.print(64,32,id(font_big), TextAlign::CENTER, "CERBERO");
      - id: page_jetson_splash
        lambda: |-
          it.print(64,32,id(font_big), TextAlign::CENTER, "CERBERO");
      - id: page_shutdown
        lambda: |-
          it.print(64,32,id(font_big), TextAlign::CENTER, "OFF");

      - id: page_battery
        lambda: |-
          // batteria
          int x0 = 124; 
          int y0 = 32;
          it.rectangle(0, 0, x0, y0);
          it.filled_rectangle(3, 3, id(battery_level)*x0/100-2, y0-6);
          it.filled_rectangle(x0, 10, x0+1, 12);
          //it.printf(x0+3, 0, id(font_level), "%d%%", min(99,id(battery_level)));

          // autonomia
          it.printf(64, y0+2, id(font_autonomy), TextAlign::CENTER_HORIZONTAL, "%d minuti", id(autonomy));
      
      - id: page_charge
        lambda: |-
          // batteria
          int x0 = 124; 
          int y0 = 32;
          it.rectangle(0, 0, x0, y0);
          it.filled_rectangle(3, 3, id(battery_level)*x0/100-2, y0-6);
          it.filled_rectangle(x0, 10, x0+1, 12);
          //it.printf(x0+3, 0, id(font_level), "%d%%", min(99,id(battery_level)));

          // autonomia
          it.printf(64, y0+2, id(font_autonomy), TextAlign::CENTER_HORIZONTAL, "%d minuti %d", id(autonomy), id(jetson_is_powered).state);

      - id: page2
        lambda: |-
          int minutes = id(uptime_sensor).state/60;
          it.printf(64, 0, id(font_uptime), TextAlign::CENTER_HORIZONTAL, "acceso da");
          it.printf(64, 25, id(font_uptime), TextAlign::CENTER_HORIZONTAL, "%d minuti", minutes);
          //it.rectangle(0, 0, 128, 32);
          //it.rectangle(0, 0, 128, 16);
          //it.printf(1, 0, id(myfont), "Vcc=%2.3fV", id(vcc).state);
          //it.printf(0, 0, id(myfont), "spegnimento...");

interval:
  - interval: 1s
    then:
      - lambda: |-
          id(uptime_seconds) += 1;

          id(battery_level) += 10;
          if (id(battery_level) > 100) {
            id(battery_level) = 1;
            //id(oled).show_page(id(page2));
          }
  - interval: 1s
    then:
      if:
        condition:
          - binary_sensor.is_on: jetson_is_powered
        then:
          - switch.turn_on: jetson_on
          - delay: 2s
          - display.page.show: page_debug
        else:
          - display.page.show: page_charge

  # - interval: 3s
  #   then:
  #     - display.page.show_next: oled
  #     - component.update: oled
  - interval: 5s
    then:
      - lambda: |-
          id(autonomy) -= 1;
          if(id(autonomy) < 1) {
            id(autonomy) = 300;
          }
  - interval: 2000ms
    then:
      - switch.turn_on: led
      - delay: 100ms
      - switch.turn_off: led
  
globals:
  - id: battery_level
    type: int
    restore_value: no
    initial_value: '100'
  - id: uptime_seconds
    type: int
    restore_value: no
    initial_value: '0'
  - id: autonomy
    type: int
    restore_value: no
    initial_value: '180'
  - id: status
    type: int
    restore_value: no
    initial_value: '-1' # 0 charging and jetson off, 1 jetson on, -1 splash screen




color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 0%
    blue: 0%
  - id: my_green
    red: 100%
    green: 0%
    blue: 100%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_cyan
    red: 0%
    green: 0%
    blue: 100%
  - id: my_magenta
    red: 0%
    green: 100%
    blue: 0%
  - id: my_white
    red: 0%
    green: 0%
    blue: 0%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: my_black
    red: 100%
    green: 100%
    blue: 100%    


font:
  # - file: "fonts/Comic Sans MS.ttf"
  #   id: my_font
  #   size: 20

  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: myfont
    size: 18
  - file: "gfonts://Roboto"
    id: font_level
    size: 24
  - file: "gfonts://Roboto"
    id: font_autonomy
    size: 18
  - file: "gfonts://Roboto"
    id: font_uptime
    size: 20
  - file: "gfonts://Roboto"
    id: font_small
    size: 14
  - file: "gfonts://Roboto"
    id: font_big
    size: 18
# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""
  reboot_timeout: 0s

ota:
  password: ""

wifi:
  ssid: "ranch"
  password: !secret WifiPassword

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Battery Fallback Hotspot"
    password: "BcmUJnZZawL0"

captive_portal:

# The ST7735 display is connected to the NodeMCU board as follows:
# RST pin is connected to D4 (ESP8266EX GPIO2),
# CS pin is connected to D3 (ESP8266EX GPIO0),
# D/C-RS pin is connected to D2 (ESP8266EX GPIO4),
# DIN-mosi-sda pin is connected to D7 (ESP8266EX GPIO13),
# CLK-sck pin is connected to D5 (ESP8266EX GPIO14),
## Pins D5 (GPIO14) and D7 (GPIO13) are hardware SPI module pins of the ESP8266EX microcontroller respectively for SCK (serial clock) and MOSI (master-out slave-in).

# spi:
#   clk_pin: GPIO14
#   mosi_pin: GPIO13


# # SDA for MOSI and SCK for CLK.
# display:
#   - platform: st7735
#     id: oled
#     model: "INITR_BLACKTAB"
#     reset_pin: GPIO2
#     cs_pin: GPIO0
#     dc_pin: GPIO4
#     rotation: 90
#     device_width: 128
#     device_height: 160
#     col_start: 0
#     row_start: 0
#     eight_bit_color: True
#     #use_bgr: True
#     update_interval: 1s
#     pages:
#       # - id: page_start
#       #   lambda: |-
#       #     it.print("Counter:", counter.state)
#       #     //it.print(0, 0, id(roboto), "Start");
#       #     //it.print("Time:", time.now().time_of_day().to_string())
#       #     //it.printf(0, 30, id(opensans_14), "CO2: %.0f ppm", id(co2).state);

#       - id: page1
#         lambda: |-
#           it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
#           it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));   // header bar
          
#           it.print(it.get_width()/2, 10, id(myfont), id(my_red), TextAlign::CENTER, "Cerbero");
#           //it.print(it.get_width()/2, 30, id(myfont), id(my_green), TextAlign::CENTER, "Cerbero");
#           //it.print(it.get_width()/2, 50, id(myfont), id(my_red), TextAlign::CENTER, "ESPHome");
#           int x_max = 110;
#           int y=30;
#           int h=15;
#           it.rectangle(0, y, x_max, y+h);
#           it.filled_rectangle(0, y, id(battery_level)*x_max/100, y+h);
#           it.printf(x_max+3, y, id(font_level), "%d%%", min(99,id(battery_level)));
#       # - id: page2
#       #   lambda: |-
#       #     int x_max = 100;
#       #     it.rectangle(0, 0, x_max, 32);
#       #     it.filled_rectangle(0, 0, id(battery_level)*x_max/100, 32);
#       #     it.printf(x_max+3, 0, id(font_level), "%d%%", min(99,id(battery_level)));
#       # - id: page3
#       #   lambda: |-
#       #     //it.rectangle(0, 0, 128, 32);
#       #     //it.rectangle(0, 0, 128, 16);
#       #     //it.printf(1, 0, id(myfont), "Vcc=%2.3fV", id(vcc).state);
#       #     it.printf(0, 0, id(myfont), "spegnimento...");
